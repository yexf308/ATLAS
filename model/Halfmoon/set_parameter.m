  D        = 20;                   % The dimension of the full system
  d        = 1;                   % The dimension of the slow manifold. Later we can estimate this dimenstion
  chi_p  = 1.96;                 % for 95% Confidence interval for 1D Gaussian distribution
  K_int      = 10;                   % Number of initial points on the manifold.
  N      = 8000000; %6000000;                % Number of short traj starting from the same initial point
  dt     = 0.05;              % Simulation time-step
  T_one  = 800000;                  % Time for single long trajectory to learn ini K charts. 
  
  t0        = 20*dt; %10*dt;             % The time as the benchmark. Drift and diffusion varies small within t0
  T_max     = 25*dt;             % Time for short trajctories.
  X_int     = ones(1,D);
  X_int(2)  = 0;
  threshold = [0.5, 0.01];               % The first one is R_max determined by the diameter of the slow manifold when setting the value of R and the second one threshold for occational prj
  connectivity_threshold = 4;    %  two landmarks are connected if they are with in r*sqrt(t0)
  explore_threshold      = 0.95;
  option                 = 1; % 1 for fast mode prj, 2 for orthogonal prj 
  modify                 = 0; % 0 use the intercept(t=0) 1 use the tau_min point as the landmark
  relearn_option         = 1;


  LowerBound = 20*dt;               %  Lowerbound of the training window
  UpperBound = 25*dt;               %  Upperbound of the training window

Nstep = 1*10^5;
gap=1;
a1 = 0;
a2 = 5*10^-3;
a3 = 2.5*10^-3;
a4 = 0.06;
eps = 0.01;
b1 = 0.04/eps;
b2 = 0.035/sqrt(eps);
b3 = 0.05/eps;
b4 = 0.02/sqrt(eps);
t = -1;

Tran = diag(ones(1,D-2),1);
Tran(:,1)=ones(D-1,1);
Tran=Tran(1:D-2,:);

Tran_inv = diag(ones(1,D-2),1);
Tran_inv(:,1)=ones(D-1,1)*(-1);
Tran_inv=Tran_inv(1:D-2,:);


parameter      = struct(       ...
      'a1',            a1,        ...
      'a2',            a2,       ...
      'a3',            a3,        ...
      'a4',            a4,        ...
      'b1',            b1, ...
      'b2',            b2, ...
      'b3',            b3, ...
      'b4',            b4, ...
      'Tran',          Tran, ...
      'Tran_inv',      Tran_inv, ...
      't',             t  ...
     );
 
drift        = @(X) get_drift(X, parameter); 
diffusion    = @(X) get_diffusion(X, parameter);
nonlin_trans = @(X) get_nonlin_trans(X, parameter);
nonlin_trans_inv = @(X) get_nonlin_trans_inv(X, parameter);
%weighted_dd  = @(X_curr, chart,neigh) weighted_drift_diffusion(X_curr, chart, t0, chi_p, neigh, D,d, threshold, option);

RHS_parameter = struct( ...
    'T_max',      T_max,...
    'dt',         dt,                    ...
    'N',              N,                 ...
    't0',             t0,                ...
    'chi_p',          chi_p,             ...
    'threshold',      threshold,         ...
    'connectivity_threshold',connectivity_threshold, ...
    'D',          D, ...
    'd',          d, ...
    'modify',     modify, ...
    'drift',      drift, ...
    'diffusion',  diffusion, ...
    'nonlin_trans',  nonlin_trans, ...
    'nonlin_trans_inv', nonlin_trans_inv,...
    'UpperBound', UpperBound,...
    'LowerBound', LowerBound ...
);




simulator_one      = @(Sim_parameter) simEulernonlintrans_one_traj(RHS_parameter,Sim_parameter);
simulator_no_par   = @(Sim_parameter) simEulernonlintrans(RHS_parameter,Sim_parameter);
simulator_par      = @(Sim_parameter) simEulernonlintrans_par(RHS_parameter,Sim_parameter); 


 MSM_parameter        = struct(           ...
            'step',               1,      ...
            'N_state',            1*10^6, ...
            'dt_s',               t0      ...
            );



 RHS_parameter_relearn = RHS_parameter; % one can change some RHS if you believe the invariant manifold is not changed.
 relearn_parameter   = struct(                              ...
            'N_relearn',          N,                     ...
            'iter',               1,                       ...
            'RHS_parameter',      RHS_parameter_relearn,   ...
            'relative_threshold',  [0.05, 0.1],            ...
            'simulator_par',      @(Sim_parameter) simEulernonlintrans_par(RHS_parameter_relearn,Sim_parameter) ...
            );


        
chart_sim_parameter      = struct (                                                   ...
                                      'X_int',                   [],                  ...
                                      'nearest',                 4,                   ...
                                      't',                       t,                  ...
                                      't0',                      t0,                  ...
                                      'dt_s',                    t0,                  ...
                                      'D',                       RHS_parameter.D,     ...
                                      'd',                       RHS_parameter.d,     ...
                                      'Nstep',                   Nstep,               ...
                                      'gap',                     gap,                 ...
                                      'connectivity',            [],                  ...
                                      'explore_threshold',       explore_threshold,   ...
                                      'N',                       N                    ...
                                     );    

     % parameter for MFPTlength
                             
  N_IC     = 30000;
    
    
chart_fileName                = [datapath,'chart.mat'];
chart_part_fileName           = [datapath,'chart_part.mat'];
TranM_fileName                = [datapath,'TranM.mat'];
well_fileName                 = [datapath,'well.mat'];
FPT_fileName                  = [datapath,'Halfmoon_FPT.mat'];