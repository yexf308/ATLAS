  D         = 6;                   % The dimension of the full system
  d         = 1;                   % The dimension of the slow manifold. Later we can estimate this dimenstion
  chi_p     = 1.96;                 % for 95% Confidence interval for 1D Gaussian distribution
  K_int     = 2;                   % Number of initial points on the manifold.
  N         = 1600000;                % Number of short traj starting from the same initial point
  dt        = 1*10^-6;              % Simulation time-step
  T_one     = 10;                  % Time for single long trajectory to learn ini K charts. 
  relearn_option     = 1;          % option to relearn
  
  t0                     = 10*dt;          % The time as the benchmark. Drift and diffusion varies small within t0
  T_max                  = 50*dt;         %50*dt;             % Time for short trajctories.
  X_int                  = [  -1.4461    0.5578   1.5361    1.4268   -2.0593    0.1615] + 0.1*randn(1,6);
  threshold              = [1.5, 0.001];               % The first one is R_max determined by the diameter of the slow manifold when setting the value of R and the second one threshold for occational prj
  connectivity_threshold = 4;    %  two landmarks are connected if they are with in r*sqrt(t0)
  explore_threshold      = 0.95;
  option                 = 1; % 1 for fast mode prj, 2 for orthogonal prj
  modify                 = 0; % 0 use the intercept(t=0) 1 use the tau_min point as the landmark
  % The training window is larger than the relaxtion here. It is to ensure
  % the landmark are sufficiently relaxed onto the manifold
  LowerBound             = 40*dt; %40*dt;               %  Lowerbound of the training window
  UpperBound             = 50*dt; %50*dt;               %  Upperbound of the training window
  
  
  %parameter for simuation
  Nstep                  = 2*10^2;    
  gap                    = 10;    
  
  
  
  %parameter for RHS
  l                      = 1.53;
  k2                     = 319225; % 1.17*10^6;
  k3                     = 62500;
  theta                  = 112/180*pi; % 112 degree
  c1                     = 2037.82;
  c2                     = 158.52;
  c3                     = -3227.70;
  beta                   = 4*10^-3;
  sigma                  = sqrt(2*beta^(-1));
  
  parameter              = struct(       ...
      'l',             l,                ...
      'k2',            k2,               ...
      'k3',            k3,               ...
      'theta',         theta,            ...
      'c1',            c1,               ...
      'c2',            c2 ,              ...
      'c3',            c3 ,              ...
      'sigma',         sigma             ...
     );
  
drift                    = @(X) get_drift(X, parameter); 
diffusion                = @(X) get_diffusion(X, parameter);
RHS_parameter = struct(                  ...
    'dt',             dt ,               ...
    'T_max',          T_max ,            ...
    'N',              N,                 ...
    't0',             t0,                ...
    'chi_p',          chi_p,             ...
    'threshold',      threshold,         ...
    'modify',         modify,            ...
    'connectivity_threshold',connectivity_threshold, ...
    'D',              D,                 ...
    'd',              d,                 ...
    'parameter',      parameter,         ...
    'drift',          drift,             ...
    'diffusion',      diffusion,         ...
    'UpperBound',     UpperBound,        ...
    'LowerBound',     LowerBound         ...
);


% setup simulator 
simulator_one                 = @(Sim_parameter) simEuler_one_traj(RHS_parameter,Sim_parameter);
simulator_no_par              = @(Sim_parameter) simEuler(RHS_parameter,Sim_parameter);
simulator_par                 = @(Sim_parameter) simEuler_par(RHS_parameter,Sim_parameter);       


MSM_parameter        = struct(           ...
            'step',               1,      ...
            'N_state',            1*10^6, ...
            'dt_s',               10*dt      ...
            );

        
chart_sim_parameter      = struct (                                                   ...
                                      'X_int',                   [],                  ...
                                      'nearest',                 1,                   ...
                                      't0',                      t0,                  ...
                                      'dt_s',                    10*dt,                  ...
                                      'D',                       RHS_parameter.D,     ...
                                      'd',                       RHS_parameter.d,     ...
                                      'Nstep',                   Nstep,                ...
                                      'gap',                     gap,                 ...
                                      'connectivity',            [],                  ...
                                      'explore_threshold',       explore_threshold,   ...
                                      'N',                       N                    ...
                                     );       
        
        
 % parameter for relearn chart
      
 RHS_parameter_relearn  = RHS_parameter; % one can change some RHS if you believe the invariant manifold is not changed.
 relearn_parameter      = struct(                            ...
            'N_relearn',          6*N,                       ...
            'iter',               15,                         ...
            'RHS_parameter',      RHS_parameter_relearn,     ...
            'relative_threshold',  [0.01, 0.05],            ...
            'simulator_par',      @(Sim_parameter) simEuler_par(RHS_parameter_relearn,Sim_parameter) ...
            );
        
 % parameter for MFPTlength
 N_IC                  = 30000;

 %file path
chart_fileName                = [datapath,'chart.mat'];
chart_part_fileName           = [datapath,'chart_part.mat'];
chart_plot_fileName           = [datapath,'chart_plot.mat'];
TranM_fileName                = [datapath,'TranM.mat'];
TranM_plot_fileName           = [datapath,'TranM_plot.mat'];
chart_relearn_fileName        = [datapath,'chart_relearn.mat'];
well_fileName                 = [datapath,'well.mat'];
FPT_fileName                  = [datapath,'Butane_FPT.mat'];
